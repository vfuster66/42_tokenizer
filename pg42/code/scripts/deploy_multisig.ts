import { ethers } from "hardhat";
import dotenv from "dotenv";

// üîπ Chargement des variables d'environnement depuis le fichier .env
dotenv.config();

async function main() {
    // üîπ V√©rification que toutes les adresses des propri√©taires sont bien d√©finies dans le fichier .env
    if (!process.env.OWNER1_ADDRESS || !process.env.OWNER2_ADDRESS || 
        !process.env.OWNER3_ADDRESS || !process.env.OWNER4_ADDRESS) {
        throw new Error("‚ùå Les adresses des owners sont manquantes dans le fichier .env");
    }

    // üîπ R√©cup√©ration du compte qui d√©ploiera le contrat
    const signers = await ethers.getSigners();
    const deployer = signers[0];

    // üîπ D√©finition des adresses des propri√©taires multisig √† partir du .env
    const owners = [
        process.env.OWNER1_ADDRESS,
        process.env.OWNER2_ADDRESS,
        process.env.OWNER3_ADDRESS,
        process.env.OWNER4_ADDRESS
    ];

    // üîπ V√©rification qu'il n'y a pas de doublons parmi les propri√©taires
    const uniqueOwners = new Set(owners);
    if (uniqueOwners.size !== owners.length) {
        throw new Error("‚ùå Les owners ne doivent pas contenir de doublons.");
    }

    // üîπ R√©cup√©ration du nombre de confirmations requises, avec une valeur par d√©faut de 2 si non d√©fini
    const requiredConfirmations = process.env.REQUIRED_CONFIRMATIONS 
        ? parseInt(process.env.REQUIRED_CONFIRMATIONS) 
        : 2;

    console.log(`üöÄ D√©ploiement du multisig avec l'adresse : ${deployer.address}`);
    console.log("üë• Owners:", owners);
    console.log("‚úçÔ∏è Confirmations requises:", requiredConfirmations);

    // üîπ D√©ploiement du contrat MultiSigWallet en passant la liste des propri√©taires et le nombre de confirmations requises
    const MultiSigWallet = await ethers.deployContract("MultiSigWallet", [
        owners,
        requiredConfirmations
    ]);

    // üîπ Attente de la confirmation du d√©ploiement
    await MultiSigWallet.waitForDeployment();
    const multisigAddress = await MultiSigWallet.getAddress();
    console.log(`‚úÖ Multisig d√©ploy√© √† l'adresse : ${multisigAddress}`);

    // üîπ Affichage d'un r√©sum√© des informations de d√©ploiement
    console.log("\nüìù R√©sum√© du d√©ploiement:");
    console.log("------------------------");
    console.log("Adresse du contrat:", multisigAddress);
    console.log("Nombre d'owners:", owners.length);
    console.log("Confirmations n√©cessaires:", requiredConfirmations);
}

// üîπ Gestion des erreurs lors du d√©ploiement du contrat
main().catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement :", error);
    process.exitCode = 1;
});
